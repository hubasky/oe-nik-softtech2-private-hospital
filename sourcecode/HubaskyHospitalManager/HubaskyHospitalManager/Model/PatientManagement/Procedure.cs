//merged with SB 20160430_0920
///////////////////////////////////////////////////////////
//  Procedure.cs
//  Implementation of the Class Procedure
//  Generated by Enterprise Architect
//  Created on:      07-ápr.-2016 12:45:19
//  Original author: Owczarek Artur
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using HubaskyHospitalManager.Model.PatientManagement;
using HubaskyHospitalManager.Model.InventoryManagement;
using HubaskyHospitalManager.Model.Common;
using System.ComponentModel.DataAnnotations;

namespace HubaskyHospitalManager.Model.PatientManagement
{
    public class Procedure
    {
        [Key]
        public string CreatedTimestamp { get; private set; }
        public string LastModifiedTimestamp { get; set; }
        
        //újak
        public string Anamnesis{ get; set; }
        public string Diagnosis { get; set; }
        public int Duration { get; set; }
        private List<string> attachments;
        private ProcedureType procedureType;
        private Employee responsible;

        //set esetén ezeken keresztül frissül a LastModifiedTimestamp!



        private List<InventoryItem> inventoryUsage;

        private string name;
        private int price;
        private State state;


        public ProcedureType ProcedureType
        {
            get { return procedureType; }
            set
            {
                procedureType = value;
                isUpdated();
            }
        }

        public List<string> Attachments
        {
            get { return attachments; }
            set
            {
                attachments = value;
                isUpdated();
            }
        }

        public string Name
        {
            get { return name; }
            set
            {
                name = value;
                isUpdated();
            }
        }

        public int Price
        {
            get { return price; }
            set
            {
                price = value;
                isUpdated();
            }
        }

        public State State
        {
            get { return state; }
            set
            {
                state = value;
                isUpdated();
            }
        }

        public Employee Responsible
        {
            get { return responsible; }
            set
            {
                responsible = value;
                isUpdated();
            }
        }

        public virtual List<InventoryItem> InventoryUsage
        {
            get { return inventoryUsage; }
            set
            {

                inventoryUsage = value;
                isUpdated();
            }
        }
       
        public Procedure()
        {
            this.CreatedTimestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

            this.State = State.New;
            this.InventoryUsage = new List<InventoryItem>();

            this.Price = 0;
            this.Name = "";
            this.Attachments = new List<string>();
            //this.responsible //-> nincs inicializálva!

            this.LastModifiedTimestamp = this.CreatedTimestamp;
        }


        public Procedure(string createdTimestamp, State state, List<InventoryItem> inventoryUsage,
            int price, string name, List<string> attachments)
        {
            this.CreatedTimestamp = createdTimestamp;
            this.State = state;
            this.InventoryUsage = inventoryUsage;
            this.Price = price;
            this.Name = name;
            this.Attachments = attachments;
        }

        /// 
        /// <param name="attachment"></param>
        public void AddAttachment(string attachment)
        {
            this.Attachments.Add(attachment);
        }

        public void UpdateInventoryUsage(ICollection<InventoryItem> usage)
        {
            InventoryUsage = new List<InventoryItem>(usage);
        }


        private void isUpdated()
        {
            LastModifiedTimestamp = DateTime.Now.ToString(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
        }

        //public void IsClosed()
        //{
        //    this.State = State.Closed;
        //}

        public void UpdateProcedure(Procedure newProcedure)
        {
            this.State = newProcedure.State;

            this.InventoryUsage = newProcedure.InventoryUsage;
            this.Price = newProcedure.Price;
            this.Name = newProcedure.Name;
            this.Responsible = newProcedure.Responsible;

            this.Attachments = newProcedure.Attachments; //itt lehet, hogy majd update metódust kell írni...


            this.CreatedTimestamp = newProcedure.CreatedTimestamp;


            //utoljára, hogy a setterek ne csesszék szét!
            this.LastModifiedTimestamp = newProcedure.LastModifiedTimestamp;
        }


        internal Procedure Clone()
        { 
            Procedure clone = new Procedure(
                CreatedTimestamp,
                State,
                InventoryUsage,
                Price,
                Name,
                Attachments);

            return clone;
        }
    }//end Procedure

}//end namespace PatientManagement