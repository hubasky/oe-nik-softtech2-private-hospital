//merged with SB 20160430_0920
///////////////////////////////////////////////////////////
//  Procedure.cs
//  Implementation of the Class Procedure
//  Generated by Enterprise Architect
//  Created on:      07-ápr.-2016 12:45:19
//  Original author: Owczarek Artur
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using HubaskyHospitalManager.Model.PatientManagement;
using HubaskyHospitalManager.Model.InventoryManagement;
using HubaskyHospitalManager.Model.Common;
using System.ComponentModel.DataAnnotations;
using HubaskyHospitalManager.Model.HospitalManagement;

namespace HubaskyHospitalManager.Model.PatientManagement
{
    public class Procedure
    {
        [Key]
        public int Id { get; set; }
        public string CreatedTimestamp { get; set; }
        public string LastModifiedTimestamp { get; set; }
        public ProcedureType ProcedureType { get; set; }
        public Employee Responsible { get; set; }
        public Ward Ward { get; set; }

        public string Anamnesis { get; set; }
        public string Diagnosis { get; set; }
        public int Duration { get; set; }

        public virtual List<ItemUsage> InventoryUsage { get; set; }
        public virtual List<Attachment> Attachments { get; set; }

        public State State { get; set; }
        public int Price { get; set; }

        

        public Procedure()
        {
            this.CreatedTimestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

            this.State = State.New;
            this.InventoryUsage = new List<ItemUsage>();

            this.Price = 0;
            this.Attachments = new List<Attachment>();
            //this.responsible //-> nincs inicializálva!

            this.LastModifiedTimestamp = this.CreatedTimestamp;
        }


        public Procedure(string createdTimestamp, State state, List<ItemUsage> inventoryUsage,
            int price, List<Attachment> attachments, string anamnesis, string diagnosis,
            int duration, ProcedureType type)
        {
            this.CreatedTimestamp = createdTimestamp;
            this.State = state;
            this.InventoryUsage = inventoryUsage;
            this.Price = price;
            this.Attachments = attachments;
        }

        /// 
        /// <param name="attachment"></param>
        public void AddAttachment(Attachment attachment)
        {
            this.Attachments.Add(attachment);
        }

        public void UpdateInventoryUsage(ICollection<ItemUsage> usage)
        {
            InventoryUsage = new List<ItemUsage>(usage);
        }


        private void isUpdated()
        {
            LastModifiedTimestamp = DateTime.Now.ToString(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
        }

        public string[] isClosed()
        {
            string[] billitem = {"", "",""};

            if (this.State != State.Paid && this.State != State.Closed)
            {
                this.State = State.Closed;
            }
            
            billitem[0] = this.CreatedTimestamp.Substring(0,10);      //date
            billitem[1] = this.ProcedureType == null? "Eljárás" : this.ProcedureType.ToString();//Proc.type
            billitem[2] = this.Price.ToString();        //PRICE
            
                
            return billitem;   
        }

        public void UpdateProcedure(Procedure newProcedure)
        {
            this.CreatedTimestamp = newProcedure.CreatedTimestamp;
            this.State = newProcedure.State;
            this.InventoryUsage = newProcedure.InventoryUsage;
            this.Price = newProcedure.Price;
            this.Attachments = newProcedure.Attachments;
            this.Anamnesis = newProcedure.Anamnesis;
            this.Diagnosis = newProcedure.Diagnosis;
            this.Duration = newProcedure.Duration;
            this.ProcedureType = newProcedure.ProcedureType;

            //utoljára, hogy a setterek ne csesszék szét!
            this.LastModifiedTimestamp = newProcedure.LastModifiedTimestamp;
        }


        internal Object Clone()
        {
            //List<ItemUsage> cloneUsage = new List<ItemUsage>();
            //foreach (ItemUsage item in InventoryUsage)
            //{
            //    cloneUsage.Add((ItemUsage)item.Clone());
            //}


            Object clone = new Procedure(
                CreatedTimestamp,
                State,
                //cloneUsage,
                InventoryUsage,
                Price,
                Attachments, 
                Anamnesis, 
                Diagnosis, 
                Duration, 
                ProcedureType);

            return clone;
        }
    }//end Procedure

}//end namespace PatientManagement