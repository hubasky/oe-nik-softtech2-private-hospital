//merged with SB 20160430_0920
///////////////////////////////////////////////////////////
//  Procedure.cs
//  Implementation of the Class Procedure
//  Generated by Enterprise Architect
//  Created on:      07-ápr.-2016 12:45:19
//  Original author: Owczarek Artur
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using HubaskyHospitalManager.Model.PatientManagement;
using HubaskyHospitalManager.Model.InventoryManagement;
using HubaskyHospitalManager.Model.Common;
using System.ComponentModel.DataAnnotations;

namespace HubaskyHospitalManager.Model.PatientManagement
{
    public class Procedure
    {
        [Key]
        public string CreatedTimestamp { get; private set; }
        public string LastModifiedTimestamp { get; set; }

        //set esetén ezeken keresztül frissül a LastModifiedTimestamp!
        private List<string> attachments;
        private string name;
        private int price;
        private State state;
        private ProcedureType procedureType;


        private Employee responsible;
        private List<InventoryItem> inventoryUsage;

        private List<InventoryItem> deltaInventoryUsage;


        public ProcedureType ProcedureType
        {
            get { return procedureType; }
            set
            {
                procedureType = value; 
                isUpdated();
            }
        }

        public List<string> Attachments
        {
            get { return attachments; }
            set
            {
                attachments = value;
                isUpdated();
            }
        }

        public string Name
        {
            get { return name; }
            set
            {
                name = value;
                isUpdated();
            }
        }

        public int Price
        {
            get { return price; }
            set
            {
                price = value;
                isUpdated();
            }
        }

        public State State
        {
            get { return state; }
            set
            {
                state = value;
                isUpdated();
            }
        }

        public Employee Responsible
        {
            get { return responsible; }
            set
            {
                responsible = value;
                isUpdated();
            }
        }

        public virtual List<InventoryItem> InventoryUsage
        {
            get { return inventoryUsage; }
            set
            {

                inventoryUsage = value;
                isUpdated();
            }
        }

        public List<InventoryItem> UpdateInventoryUsage(List<InventoryItem> newItemsList)
        {
            //HOLNAP ALAPOSAN ÁTNÉZNI
            //először visszaírjuk az adatbázisba a jelenleg felhasznált cuccokat, hiszen outdated lesz
            foreach (InventoryItem item in InventoryUsage)
            {
                ChangeQuantity(item, item.Quantity); //ez hozzáad
            }

            bool okToGo = true;

            int idx = 0;
            while (okToGo)
            {
                //okToGo = checkquantity(InventoryUsage[idx].Id, InventoryUsage[idx].Quantity)
                idx++;
            }

            //ha minden van raktáron, amit le akarunk kérni
            if (okToGo)
            {
                foreach (InventoryItem item in newItemsList)
                {
                    ChangeQuantity(item, item.Quantity * (-1)); //ez levon
                    inventoryUsage = newItemsList;
                }
            }
            else
            {
                foreach (InventoryItem item in InventoryUsage)
                {
                    ChangeQuantity(item, item.Quantity * (-1)); //ez levon
                }
            }

            return inventoryUsage;
        }

        public List<InventoryItem> DeltaInventoryUsage
        {
            get { return deltaInventoryUsage; }
            set
            {
                deltaInventoryUsage = value;
                isUpdated();
            }
        }

        public Procedure()
        {
            this.CreatedTimestamp = DateTime.Now.ToString("yyyyMMddHHmmssff_" + Guid.NewGuid());

            this.State = State.New;
            this.InventoryUsage = new List<InventoryItem>();
            this.DeltaInventoryUsage = new List<InventoryItem>();
            this.Price = 0;
            this.Name = "";
            this.Attachments = new List<string>();
            //this.responsible //-> nincs inicializálva!

            this.LastModifiedTimestamp = this.CreatedTimestamp;
        }


        /// 
        /// <param name="attachment"></param>
        public void AddAttachment(string attachment)
        {
            this.Attachments.Add(attachment);
        }

        /// 
        /// <param name="item"></param>
        /// <param name="decrement"></param>
        public int ChangeQuantity(InventoryItem item, int decrement) //csökkentés negatív előjellel!
        {
            //ENNEK KELLENE HOZZÁFÉRNIE AZ NVENTORY-HOZ, ÉS TÉNYLEGESEN MÓDOSÍTANI A SZÁMOKAT


            throw new NotImplementedException();
            //}

        }

        /// 
        /// <param name="name"></param>
        public List<InventoryItem> SearchInventory(string name) //DEPRECATED
        {
            //ezt nem itt kell implementálni, hanem az inventory-nál!

            //Artúr kódjával összehegeszteni!

            return null;
        }

        public override bool Equals(object obj)
        {
            var properProcedure = obj as Procedure;

            if (properProcedure == null)
            {
                return false;
            }

            //ha minden set-hez be van írva az isUpdated(), akkor csak ezeket kell ellenőrizni!
            if (!(this.CreatedTimestamp == properProcedure.CreatedTimestamp &&
                this.LastModifiedTimestamp == properProcedure.LastModifiedTimestamp))
            {
                return false;
            }

            return true;
        }

        private void isUpdated()
        {
            //ide kell betenni a decreasequantityitem-et...
            LastModifiedTimestamp = DateTime.Now.ToString(DateTime.Now.ToString("yyyyMMddHHmmssff_" + Guid.NewGuid()));

        }

        public void IsClosed()
        {
            this.State = State.Closed;
        }

        public void UpdateProcedure(Procedure newProcedure)
        {
            this.State = newProcedure.State;
            this.DeltaInventoryUsage = newProcedure.DeltaInventoryUsage;
            this.InventoryUsage = newProcedure.InventoryUsage;
            this.Price = newProcedure.Price;
            this.Name = newProcedure.Name;
            this.Responsible = newProcedure.Responsible;

            this.Attachments = newProcedure.Attachments; //itt lehet, hogy majd update metódust kell írni...

            this.CreatedTimestamp = newProcedure.CreatedTimestamp;

            //utoljára, hogy a setterek ne csesszék szét!
            this.LastModifiedTimestamp = newProcedure.LastModifiedTimestamp;
        }

    }//end Procedure

}//end namespace PatientManagement