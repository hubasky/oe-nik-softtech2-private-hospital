//merged with SB 20160430_0920
///////////////////////////////////////////////////////////
//  PatientManager.cs
//  Implementation of the Class PatientManager
//  Generated by Enterprise Architect
//  Created on:      07-ápr.-2016 12:45:18
//  Original author: Owczarek Artur
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using HubaskyHospitalManager.Model.PatientManagement;
using HubaskyHospitalManager.Model.Common;
using HubaskyHospitalManager.Model.Exceptions;
using HubaskyHospitalManager.Model.ApplicationManagement;
//using HubaskyHospitalManager.Model.InventoryManagement;
using System.Linq;

namespace HubaskyHospitalManager.Model.PatientManagement
{
    public class PatientManager : IPatientManagement
    {
        private ApplicationManagement.ApplicationManager appManager;
        private InventoryManagement.InventoryManager invManager;

        public InventoryManagement.InventoryManager InvManager
        {
            get { return invManager; }
            set { invManager = value; }
        }

        public virtual List<Patient> Patients { get; set; }

        public ApplicationManagement.ApplicationManager AppManager
        {
            get { return appManager; }
            set { appManager = value; }
        }

        public PatientManager()
        {
            Patients = new List<Patient>();
        }

        public PatientManager(ApplicationManager appMgr)
        {
            this.AppManager = appMgr;
            this.invManager = appMgr.InventoryManagement;
            Patients = new List<Patient>();

            Patients = AppManager.ApplicationDb.Patients.Select(m => m).ToList();
            
        }

        //interfész metódusok:
        //+    //Patient NewPatient();
        //+    //void UpdatePatient(Patient patientFromUI, Patient patientToDB);
        //+    //MedicalRecord NewMedicalRecord(Patient patient);
        //+    //Procedure NewProcedure(Patient patient);
        //+    //void CloseProcedure(Procedure procedure);
        //+    //void CloseMedicalRecord(MedicalRecord medicalRecord);
        //+    //void UpdateProcedure(MedicalRecord medicalRecordFromUI, MedicalRecord medicalRecordToDB);
        //+    //void UpdateMedicalRecord(Procedure procedureFromUI, Procedure procedureToDB);


        public void NewPatient(Patient patient)
        {
            if (patient != null)
            {
                var duplicatedPatient = (from p in Patients
                                         where patient.Ssn.Equals(p.Ssn)
                                         select p).FirstOrDefault();
                if (duplicatedPatient == null)
                {
                    Patients.Add(patient);
                    AppManager.ApplicationDb.Patients.Add(patient);
                }
                else
                    throw new DuplicatedPatientInDbException(String.Format("Patient identified by ssn {0} already exists in database.", patient.Ssn));
            }
            AppManager.ApplicationDb.SaveChanges();
        }

        /// 
        /// <param name="patient"></param>
        public void UpdatePatient(Patient patientFromUI, Patient patientToDB)
        {
            if (patientFromUI != null && patientToDB != null && patientToDB.Ssn.Equals(patientFromUI.Ssn))
            {
                patientToDB.Phone = patientFromUI.Phone;
                patientToDB.Name = patientFromUI.Name;
                patientToDB.DateOfBirth = patientFromUI.DateOfBirth;
                //patientToDB.Ssn = patientFromUI.Ssn;
                patientToDB.Address = patientFromUI.Address;
                patientToDB.Gender = patientFromUI.Gender;
                patientToDB.UpdateMedicalHistory(patientFromUI.MedicalHistory);
                AppManager.ApplicationDb.SaveChanges();
            }

            //if (!(patientFromUI.Equals(patientToDB)))
            //{
            //    //egyszerű property-k felülírása
            //    patientToDB.Phone = patientFromUI.Phone;
            //    patientToDB.Name = patientFromUI.Name;
            //    patientToDB.DateOfBirth = patientFromUI.DateOfBirth;
            //    patientToDB.Ssn = patientFromUI.Ssn;
            //    patientToDB.Gender = patientFromUI.Gender;

            //    //csak a szükséges medicalrecordokat, illetve a szükséges procedure-öket update-eli
            //    patientToDB.UpdateMedicalHistory(patientFromUI.MedicalHistory);

            //}
        }

        /// 
        /// <param name="patient"></param>
        public MedicalRecord NewMedicalRecord(Patient patient, MedicalRecord medicalRecord)
        {
            //MedicalRecord mr = new MedicalRecord();
            patient.MedicalHistory.Add(medicalRecord);

            return medicalRecord;
        }

        /// 
        /// <param name="patient"></param>
        public Procedure NewProcedure(MedicalRecord medicalrecord, Procedure procedure)
        {

            medicalrecord.NewProcedure(procedure);

            return procedure;

        }

        /// 
        /// <param name="procedure"></param>
        public void CloseProcedure(Procedure procedure)
        {
            procedure.IsClosed();
        }


        /// 
        /// <param name="medicalRecord"></param>
        public void CloseMedicalRecord(MedicalRecord medicalRecord)
        {
            medicalRecord.IsClosed();
        }


        /// 
        /// <param name="patient"></param>
        public void UpdateMedicalRecord(MedicalRecord medicalRecordFromUI, MedicalRecord medicalRecordToDB)
        {
            medicalRecordToDB.UpdateMedicalRecord(medicalRecordFromUI);

        }

        /// 
        /// <param name="procedure"></param>
        public void UpdateProcedure(Procedure procedureFromUI, Procedure procedureToDB)
        {
            procedureToDB.UpdateProcedure(procedureFromUI);
        }


    }//end PatientManager

}//end namespace PatientManagement