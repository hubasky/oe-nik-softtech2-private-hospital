//merged with SB 20160430_0920
///////////////////////////////////////////////////////////
//  PatientManager.cs
//  Implementation of the Class PatientManager
//  Generated by Enterprise Architect
//  Created on:      07-ápr.-2016 12:45:18
//  Original author: Owczarek Artur
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using HubaskyHospitalManager.Model.PatientManagement;
using HubaskyHospitalManager.Model.Common;
using HubaskyHospitalManager.Model.ApplicationManagement;
//using HubaskyHospitalManager.Model.InventoryManagement;
using System.Linq;

namespace HubaskyHospitalManager.Model.PatientManagement
{
    public class PatientManager : IPatientManagement
    {
        private List<Patient> patients;
        private ApplicationManagement.ApplicationManager appManager;
        private InventoryManagement.InventoryManager invManager;

        public InventoryManagement.InventoryManager InvManager
        {
            get { return invManager; }
            set { invManager = value; }
        }

        public List<Patient> Patients
        {
            get { return patients; }
            set { patients = value; }
        }

        public ApplicationManagement.ApplicationManager AppManager
        {
            get { return appManager; }
            set { appManager = value; }
        }

        public PatientManager()
        {

        }

        public PatientManager(ApplicationManager appMgr)
        {
            this.AppManager = appMgr;
            patients = new List<Patient>();

            patients = AppManager.ApplicationDb.Patients.Select(m => m).ToList();
        }

        //+    //Patient NewPatient();
        //+    //void UpdatePatient(Patient patientFromUI, Patient patientToDB);
        //+    //MedicalRecord NewMedicalRecord(Patient patient);
        //+    //Procedure NewProcedure(Patient patient);
        //+    //void CloseProcedure(Procedure procedure);
        //+    //void CloseMedicalRecord(MedicalRecord medicalRecord);
        //+    //void UpdateProcedure(MedicalRecord medicalRecordFromUI, MedicalRecord medicalRecordToDB);
        //    //void UpdateMedicalRecord(Procedure procedureFromUI, Procedure procedureToDB);





        public Patient NewPatient()
        {
            Patient newPatient = new Patient();
            patients.Add(newPatient);

            return newPatient;
        }

        /// 
        /// <param name="patient"></param>
        public void UpdatePatient(Patient patientFromUI, Patient patientToDB)
        {
            if (!(patientFromUI.Equals(patientToDB)))
            {
                //egyszerű property-k felülírása
                patientToDB.Phone = patientFromUI.Phone;
                patientToDB.Name = patientFromUI.Name;
                patientToDB.DateOfBirth = patientFromUI.DateOfBirth;
                patientToDB.Ssn = patientFromUI.Ssn;
                patientToDB.Gender = patientFromUI.Gender;

                //csak a szükséges medicalrecordokat, illetve a szükséges procedure-öket update-eli
                patientToDB.UpdateMedicalHistory(patientFromUI.MedicalHistory);

            }
        }

        /// 
        /// <param name="patient"></param>
        public MedicalRecord NewMedicalRecord(Patient patient)
        {
            MedicalRecord medicalRecord = new MedicalRecord();
            patient.MedicalHistory.Add(medicalRecord);

            return medicalRecord;
        }

        /// 
        /// <param name="patient"></param>
        public Procedure NewProcedure(Patient patient)
        {
            int idx = 0;
            while (!(patient.MedicalHistory[idx].State == State.Closed))
            {
                idx++;
            }

            //beteszi a még nyitott medicalhistory-ba a procedure-t
            if (idx < patient.MedicalHistory.Count)
            {
                Procedure newProc = new Procedure();
                patient.MedicalHistory[idx].NewProcedure(newProc);
                return newProc;
            }
            //ha mindegyik medicalhistory már Closed...
            else
            {
                //a konstruktorban automatikusan létrehoz egy új procedure-t is!
                NewMedicalRecord(patient);

                //emiatt kell ez a sor, Demetert meg elmehet a francba, de még így sem teljesen kóser...
                return patient.ReturnFirstProcedureOfNewMedicalRecord();
                //patient szinten kéne implementálni, ott meg nem üzembiztos
            }
        }

        /// 
        /// <param name="procedure"></param>
        public void CloseProcedure(Procedure procedure)
        {
            procedure.IsClosed();
        }


        /// 
        /// <param name="medicalRecord"></param>
        public void CloseMedicalRecord(MedicalRecord medicalRecord)
        {
            medicalRecord.IsClosed();
        }


        /// 
        /// <param name="patient"></param>
        public void UpdateMedicalRecord(MedicalRecord medicalRecordFromUI, MedicalRecord medicalRecordToDB)
        {
            medicalRecordToDB.UpdateMedicalRecord(medicalRecordFromUI);

        }

        /// 
        /// <param name="procedure"></param>
        public void UpdateProcedure(Procedure procedureFromUI, Procedure procedureToDB)
        {
            procedureToDB.UpdateProcedure(procedureFromUI);
        }


    }//end PatientManager

}//end namespace PatientManagement