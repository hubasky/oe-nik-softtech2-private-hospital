//merged with SB 20160430_0920
///////////////////////////////////////////////////////////
//  PatientManager.cs
//  Implementation of the Class PatientManager
//  Generated by Enterprise Architect
//  Created on:      07-ápr.-2016 12:45:18
//  Original author: Owczarek Artur
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using HubaskyHospitalManager.Model.PatientManagement;
using HubaskyHospitalManager.Model.Common;
using HubaskyHospitalManager.Model.ApplicationManagement;
//using HubaskyHospitalManager.Model.InventoryManagement;
using System.Linq;

namespace HubaskyHospitalManager.Model.PatientManagement
{
    public class PatientManager : IPatientManagement
    {
        private List<Patient> patients;
        private ApplicationManagement.ApplicationManager appManager;
        private InventoryManagement.InventoryManager invManager;

        public InventoryManagement.InventoryManager InvManager
        {
            get { return invManager; }
            set { invManager = value; }
        }

        public virtual List<Patient> Patients
        {
            get { return patients; }
            set { patients = value; }
        }

        public ApplicationManagement.ApplicationManager AppManager
        {
            get { return appManager; }
            set { appManager = value; }
        }

        public PatientManager()
        {

        }

        public PatientManager(ApplicationManager appMgr)
        {
            this.AppManager = appMgr;
            this.invManager = appMgr.InventoryManagement;
            patients = new List<Patient>();

            patients = AppManager.ApplicationDb.Patients.Select(m => m).ToList();
            ////a fenti helyett ideiglenesen:
            //populatepatientsTempMethod();

            //Console.WriteLine("Kati timestamp-je: " + patients[0].MedicalHistory[0].CreatedTimestamp); //.Procedures[0]
        }

        //private void populatepatientsTempMethod()
        //{
        //    Patient kati = new Patient(
        //        "Kómás Kati",   //name
        //        "069011111",       //tel
        //        "1996.06.20",   //DoB
        //        9991999,         //SSN
        //        "kamucím1",        //address
        //        null,           //medicalHistory
        //        Gender.Female   //Gender
        //        );
        //    /////
        //    kati.MedicalHistory.Add(new Model.PatientManagement.MedicalRecord());
        //    Model.PatientManagement.Procedure proc = new Model.PatientManagement.Procedure();
        //    proc.Name = "Új eljárás kati";
        //    kati.MedicalHistory[0].NewProcedure(proc);

        //    Patient karesz = new Patient(
        //        "Kankós Karesz",   //name
        //        "0660222222",       //tel
        //        "1991.02.13",   //DoB
        //        1359143,         //SSN
        //         "kamucím2",        //address
        //        null,           //medicalHistory
        //        Gender.Male   //Gender
        //        );
        //    karesz.MedicalHistory.Add(new Model.PatientManagement.MedicalRecord());
        //    Model.PatientManagement.Procedure prockaresz = new Model.PatientManagement.Procedure();
        //    prockaresz.Name = "Új eljárás karesz";
        //    karesz.MedicalHistory[0].NewProcedure(prockaresz);

        //    Patient imre = new Patient(
        //        "Itókás Imre",   //name
        //        "0670333333",       //tel
        //        "1978.09.06",   //DoB
        //        9083825,         //SSN
        //        "kamucím3",        //address
        //        null,           //medicalHistory
        //        Gender.Male   //Gender
        //        );
        //    imre.MedicalHistory.Add(new Model.PatientManagement.MedicalRecord());
        //    Model.PatientManagement.Procedure procimre = new Model.PatientManagement.Procedure();
        //    procimre.Name = "Új eljárás imre";
        //    karesz.MedicalHistory[0].NewProcedure(procimre);

        //    Patient hilda = new Patient(
        //        "Hasmenős Hilda",   //name
        //        "062044444",        //tel
        //        "1957.11.12",       //DoB
        //        1125267,            //SSN
        //        "kamucím3",         //address
        //        null,               //medicalHistory
        //        Gender.Female       //Gender
        //        );
        //    hilda.MedicalHistory.Add(new Model.PatientManagement.MedicalRecord());
        //    Model.PatientManagement.Procedure prochilda = new Model.PatientManagement.Procedure();
        //    prochilda.Name = "Új eljárás hilda";
        //    karesz.MedicalHistory[0].NewProcedure(prochilda);

        //    Patient bertold = new Patient(
        //        "Barangoló Bertold",//name
        //        "064055555",        //tel
        //        "1985.02.16",       //DoB
        //        9306484,            //SSN
        //        "kamucím4",         //address
        //        null,               //medicalHistory
        //        Gender.Male         //Gender
        //        );
        //    bertold.MedicalHistory.Add(new Model.PatientManagement.MedicalRecord());
        //    Model.PatientManagement.Procedure procbertold = new Model.PatientManagement.Procedure();
        //    procbertold.Name = "Új eljárás bertold";
        //    karesz.MedicalHistory[0].NewProcedure(procbertold);

        //    Patients.Add(kati);
        //    Patients.Add(karesz);
        //    Patients.Add(imre);
        //    Patients.Add(hilda);
        //    Patients.Add(bertold);
        //}

        //interfész metódusok:
        //+    //Patient NewPatient();
        //+    //void UpdatePatient(Patient patientFromUI, Patient patientToDB);
        //+    //MedicalRecord NewMedicalRecord(Patient patient);
        //+    //Procedure NewProcedure(Patient patient);
        //+    //void CloseProcedure(Procedure procedure);
        //+    //void CloseMedicalRecord(MedicalRecord medicalRecord);
        //+    //void UpdateProcedure(MedicalRecord medicalRecordFromUI, MedicalRecord medicalRecordToDB);
        //+    //void UpdateMedicalRecord(Procedure procedureFromUI, Procedure procedureToDB);


        public Patient NewPatient(Patient patient)
        {
            if (patient == null)
            {
                patient = new Patient();
            }

            if (!(Patients.Contains(patient)))
            {
                patients.Add(patient);
            }


            return patient;
        }

        /// 
        /// <param name="patient"></param>
        public void UpdatePatient(Patient patientFromUI, Patient patientToDB)
        {
            if (!(patientFromUI.Equals(patientToDB)))
            {
                //egyszerű property-k felülírása
                patientToDB.Phone = patientFromUI.Phone;
                patientToDB.Name = patientFromUI.Name;
                patientToDB.DateOfBirth = patientFromUI.DateOfBirth;
                patientToDB.Ssn = patientFromUI.Ssn;
                patientToDB.Gender = patientFromUI.Gender;

                //csak a szükséges medicalrecordokat, illetve a szükséges procedure-öket update-eli
                patientToDB.UpdateMedicalHistory(patientFromUI.MedicalHistory);

            }
        }

        /// 
        /// <param name="patient"></param>
        public MedicalRecord NewMedicalRecord(Patient patient)
        {
            MedicalRecord medicalRecord = new MedicalRecord();
            patient.MedicalHistory.Add(medicalRecord);

            return medicalRecord;
        }

        /// 
        /// <param name="patient"></param>
        public Procedure NewProcedure(MedicalRecord medicalrecord, Procedure procedure)
        {

            medicalrecord.NewProcedure(procedure);

            return procedure;

        }

        /// 
        /// <param name="procedure"></param>
        public void CloseProcedure(Procedure procedure)
        {
            procedure.IsClosed();
        }


        /// 
        /// <param name="medicalRecord"></param>
        public void CloseMedicalRecord(MedicalRecord medicalRecord)
        {
            medicalRecord.IsClosed();
        }


        /// 
        /// <param name="patient"></param>
        public void UpdateMedicalRecord(MedicalRecord medicalRecordFromUI, MedicalRecord medicalRecordToDB)
        {
            medicalRecordToDB.UpdateMedicalRecord(medicalRecordFromUI);

        }

        /// 
        /// <param name="procedure"></param>
        public void UpdateProcedure(Procedure procedureFromUI, Procedure procedureToDB)
        {
            procedureToDB.UpdateProcedure(procedureFromUI);
        }


    }//end PatientManager

}//end namespace PatientManagement