///////////////////////////////////////////////////////////
//  PatientManager.cs
//  Implementation of the Class PatientManager
//  Generated by Enterprise Architect
//  Created on:      07-ápr.-2016 12:45:18
//  Original author: Owczarek Artur
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using HubaskyHospitalManager.Model.PatientManagement;
using HubaskyHospitalManager.Model.Common;
using HubaskyHospitalManager.Model.ApplicationManagement;
using System.Linq;

namespace HubaskyHospitalManager.Model.PatientManagement
{
    public class PatientManager : IPatientManagement
    {
        private List<Patient> patients;
        private ApplicationManagement.ApplicationManager appManager;

        public List<Patient> Patients
        {
            get { return patients; }
            set { patients = value; }
        }

        public ApplicationManagement.ApplicationManager AppManager
        {
            get { return appManager; }
            set { appManager = value; }
        }

        public PatientManager()
        {

        }

        public PatientManager(ApplicationManager appMgr)
        {
            this.AppManager = appMgr;
            patients = new List<Patient>();
            //var resultslist = AppManager.ApplicationDb.Patients.Select(m => m).ToList();

            //foreach (Patient p in resultslist)
            //{
            //    patients.Add(p);
            //}

            //patients = (resultslist.Count == 0) ? null : resultslist;

            patients = AppManager.ApplicationDb.Patients.Select(m => m).ToList();
        }

        public Patient NewPatient()
        {
            Patient newPatient = new Patient();
            patients.Add(newPatient);

            return newPatient;
        }

        /// 
        /// <param name="patient"></param>
        public void UpdatePatient(Patient patient)
        {
            //itt két patient kell, egy a temp, és egy akit update-elni akarunk
        }


        /// 
        /// <param name="medicalRecord"></param>
        public void CloseMedicalRecord(MedicalRecord medicalRecord)
        {
            medicalRecord.State = State.Closed;
        }


        /// 
        /// <param name="procedure"></param>
        public void CloseProcedure(Procedure procedure)
        {

        }


        /// 
        /// <param name="patient"></param>
        public MedicalRecord NewMedicalRecord(Patient patient)
        {
            MedicalRecord medicalRecord = new MedicalRecord();
            patient.MedicalHistory.Add(medicalRecord);

            return medicalRecord;
        }


        /// 
        /// <param name="patient"></param>
        public Procedure NewProcedure(Patient patient)
        {
            int cnt = 0;
            while (!(patient.MedicalHistory[cnt].State == State.Closed))
            {
                cnt++;
            }

            if (cnt < patient.MedicalHistory.Count)
            {
                Procedure proc = new Procedure();
                patient.MedicalHistory[cnt].NewProcedure(proc);
                return proc;
            }
            else
            {
                return null;
            }

             

        }

        /// 
        /// <param name="patient"></param>
        public void UpdateMedicalRecord(Patient patient)
        {

            foreach (MedicalRecord medRec in patient.MedicalHistory)
            {
                if (!(medRec.State == State.Closed))
                {
                    throw new NotImplementedException("Ezt még ki kell dolgozni!");
                }
            }

        }

        /// 
        /// <param name="procedure"></param>
        public void UpdateProcedure(Procedure procedure)
        {


            procedure.LastModifiedTimestamp = DateTime.Now.ToString("yyyyMMddHHmmssff");

            throw new NotImplementedException("Ezt még ki kell dolgozni!");
        }

    }//end PatientManager

}//end namespace PatientManagement