///////////////////////////////////////////////////////////
//  HospitalManager.cs
//  Implementation of the Class HospitalManager
//  Generated by Enterprise Architect
//  Created on:      07-ápr.-2016 12:45:16
//  Original author: hazaip
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using HubaskyHospitalManager.Model.ApplicationManagement;
using HubaskyHospitalManager.Model.HospitalManagement;
using HubaskyHospitalManager.Model.Common;
using System.Linq;
using System.Windows;

namespace HubaskyHospitalManager.Model.HospitalManagement
{
	public class HospitalManager : IManageableUnit, IManageableEmployee {

        public Hospital Hospital { get; set; }
        public ApplicationManager AppManager { get; set; }

		public HospitalManager(ApplicationManager appMgr)
        {
            this.AppManager = appMgr;
            Hospital = new Hospital();
            Hospital = AppManager.ApplicationDb.Hospital.FirstOrDefault();
		}
        
		/// 
		/// <param name="employee"></param>
		/// <param name="ward"></param>
		public void AddEmployee(Employee employee, Ward ward)
        {

		}

		/// 
		/// <param name="unit"></param>
		/// <param name="parentUnit"></param>
		public void AddUnit(Unit unit, Unit parentUnit)
        {
            // Test for unit adding cases
            // unit is department, parent unit is hospital
            if (unit.GetType() == typeof(Department) && parentUnit.GetType() == Hospital.GetType())
            {
                Hospital.Departments.Add((Department)unit);
                AppManager.ApplicationDb.SaveChanges();
            }
            else if (unit.GetType() == typeof(Ward) && parentUnit.GetType() == Hospital.Departments.FirstOrDefault().GetType())
            {
                var parent = (from department in AppManager.ApplicationDb.Departments
                              where department.Id == parentUnit.Id
                              select department).FirstOrDefault();
                parent.Wards.Add((Ward)unit);
                AppManager.ApplicationDb.SaveChanges();
            }
		}

		/// 
		/// <param name="unit"></param>
		public Unit FindParentUnit(Unit unit)
        {

			return null;
		}

		/// 
		/// <param name="employee"></param>
		public void RemoveEmployee(Employee employee)
        {

		}

		/// 
		/// <param name="unit"></param>
		public void RemoveUnit(Unit unit)
        {

            if (unit != null)
            {
                if (unit.GetType() == AppManager.ApplicationDb.Departments.FirstOrDefault().GetType())
                {
                    //var dept = (from department in AppManager.ApplicationDb.Departments
                    //            where department.Id == unit.Id
                    //            select department).FirstOrDefault();
                    //MessageBox.Show(dept.ToString());

                    AppManager.ApplicationDb.Departments.Remove((Department)unit);
                    AppManager.ApplicationDb.SaveChanges();
                }
                else
                    if (unit.GetType() == AppManager.ApplicationDb.Wards.FirstOrDefault().GetType())
                    {

                        //MessageBox.Show(unit.ToString());
                        AppManager.ApplicationDb.Wards.Remove((Ward)unit);
                        AppManager.ApplicationDb.SaveChanges();
                    }
            }
		}

		public void UpdateDatabase()
        {

		}

		/// 
		/// <param name="sourceEmployee"></param>
		/// <param name="targetEmployee"></param>
		public void UpdateEmployee(Employee sourceEmployee, Employee targetEmployee)
        {

		}

		/// 
		/// <param name="sourceUnit"></param>
		/// <param name="targetUnit"></param>
		public void UpdateUnit(Unit sourceUnit, Unit targetUnit)
        {

		}

	}//end HospitalManager

}//end namespace HospitalManagement